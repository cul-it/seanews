<?php
// $Id$

/**
 * @file
 * Southeast Asia Newspaper Archive Tools
 */

/**
 * computed fields handlers
 *  see https://www.drupal.org/node/126522
 *
 * Parameters:
 *
 * &$entity_field - The computed field. Used to store the computed value.
 * $entity_type - The entity type: node, user, comment, etc.
 * $entity - The actual entity (a node, user, comment, etc.)
 * $field - General field settings.
 * $instance - Field instance settings.
 * $items - The list of items.
 *
 * field_pub_title_native_translit - transliterate field_pub_title_native
 * field_pub_title_r_cul_path - make filename/url path from field_pub_title_r_cul
 * field_pub_issue_pub_path - lookup publication pathname
 *     via entity reference field_pub_issue_pub
 */

function computed_field_field_pub_title_native_translit_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_pub_title_native');
  $x = array_pop($field_items);
  $native = array_pop($x);
  if (function_exists('transliteration_get')) {
    // replace untranslatable characters with underscore
    $native = transliteration_get($native, '_', language_default('language'));
    }
  $entity_field[0]['value'] = t($native);
}

function computed_field_field_pub_title_r_cul_path_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_pub_title_r_cul');
  $x = array_pop($field_items);
  $newspaper = array_pop($x);
  if (function_exists('transliteration_get')) {
    $newspaper = transliteration_get($newspaper, '-', language_default('language'));
    }
  // replace blanks in path name with -
  $newspaper = strtolower(str_replace(' ', '-', $newspaper));
  $entity_field[0]['value'] = t($newspaper);
}

function computed_field_field_pub_issue_pub_path_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_pub_issue_pub');
  $x = array_pop($field_items);
  $pub_nid = array_pop($x);
  $pub = node_load($pub_nid);
  $wrapper = entity_metadata_wrapper('node', $pub);
  $path = $wrapper->field_pub_title_r_cul_path->value();
  $entity_field[0]['value'] = t($path);
}

function computed_field_field_title_r_cul_translit_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_title_r_cul');
  $x = array_pop($field_items);
  $newspaper = array_pop($x);
  if (function_exists('transliteration_get')) {
    $newspaper = transliteration_get($newspaper, '-', language_default('language'));
    }
  $newspaper = strtolower(str_replace(' ', '-', $newspaper));
  $entity_field[0]['value'] = t($newspaper);
}

// function computed_field_field_title_r_cul_translit_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
//   dsm(array('entity_field_item value', $entity_field_item));
//   return $entity_field_item['value'];
// }

function former_computed_field_field_expected_issue_lookup_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $found_nid = 0;

  // find the date of the expected_issue
  $field_items = field_get_items($entity_type, $entity, 'field_expected_issue_date');
  $no_lang = array_pop($field_items);
  $expected_date = $no_lang['value'];

  // find the publication of the expected_issue
  $field_items = field_get_items($entity_type, $entity, 'field_expected_issue_publication');
  $no_lang = array_pop($field_items);
  $expected_publication= array_pop($no_lang);

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication_issue')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_pub_issue_date', 'value', $expected_date, '=')
    ->fieldCondition('field_pub_issue_pub', 'target_id', $expected_publication, '=')
    ->fieldCondition('field_pub_issue_document', 'fid', 'NULL', '!=')
    ->range(0, 10)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if (isset($result['node'])) {
    $publication_nids = array_keys($result['node']);
    $found_nid = array_pop($publication_nids);
  }

  $entity_field[0]['value'] = $found_nid;
}

/**
 * Find any expected issue for this publication and date - register the publication node
 * after a publication issue is being saved/updated we find the corresponding
 * expected_issue and put the nid of the publication in a computed field
 * see seanews.rules.inc
 * @param  node $node publication node
 * @return node       unmodified publication node
 */
function seanews_action_node_register_expected_issue($node) {

  // find the publication of this publication_issue
  $field_items = field_get_items('node', $node, 'field_pub_issue_pub');
  $no_lang = array_pop($field_items);
  $publication= array_pop($no_lang);
  //dsm(array('publication',$publication));

  // find the date of this publication_issue
  $field_items = field_get_items('node', $node, 'field_pub_issue_date');
  $no_lang = array_pop($field_items);
  $pub_date = $no_lang['value'];
  //dsm(array('pub date', "$pub_date"));

  // lookup expected_issues that match this publisher and date
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'expected_issue')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_expected_issue_date', 'value', $pub_date, '=')
    ->fieldCondition('field_expected_issue_publication', 'target_id', $publication, '=')
    ->range(0, 10)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();
  if (isset($result['node'])) {
    $expected_nids = array_keys($result['node']);
    foreach ($expected_nids as $nid) {
      $expected = node_load($nid);
      // set up the node reference from expected_issue to publication_issue
      $expected->field_expected_issue_reference[$expected->language][0]['nid'] = $node->nid;
      //$expected->field_expected_issue_reference[$expected->language][0]['target_type'] = "node";
      node_save($expected);
    }
  }

  return array('node' => $node);
}
