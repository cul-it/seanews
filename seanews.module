<?php
// $Id$

/**
 * @file
 * Southeast Asia Newspaper Archive Tools
 */

/**
 * computed fields handlers
 *  see https://www.drupal.org/node/126522
 *
 * Parameters:
 *
 * &$entity_field - The computed field. Used to store the computed value.
 * $entity_type - The entity type: node, user, comment, etc.
 * $entity - The actual entity (a node, user, comment, etc.)
 * $field - General field settings.
 * $instance - Field instance settings.
 * $items - The list of items.
 *
 * field_pub_title_native_translit - transliterate field_pub_title_native
 * field_pub_title_r_cul_path - make filename/url path from field_pub_title_r_cul
 * field_pub_issue_pub_path - lookup publication pathname
 *     via entity reference field_pub_issue_pub
 */

function computed_field_field_pub_title_native_translit_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_pub_title_native');
  $x = array_pop($field_items);
  $native = array_pop($x);
  if (function_exists('transliteration_get')) {
    // replace untranslatable characters with underscore
    $native = transliteration_get($native, '_', language_default('language'));
    }
  $entity_field[0]['value'] = t($native);
}

function computed_field_field_pub_title_r_cul_path_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_pub_title_r_cul');
  $x = array_pop($field_items);
  $newspaper = array_pop($x);
  if (function_exists('transliteration_get')) {
    $newspaper = transliteration_get($newspaper, '-', language_default('language'));
    }
  // replace blanks in path name with -
  $newspaper = strtolower(str_replace(' ', '-', $newspaper));
  $entity_field[0]['value'] = t($newspaper);
}

function computed_field_field_pub_issue_pub_path_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_pub_issue_pub');
  $x = array_pop($field_items);
  $pub_nid = array_pop($x);
  $pub = node_load($pub_nid);
  $wrapper = entity_metadata_wrapper('node', $pub);
  $path = $wrapper->field_pub_title_r_cul_path->value();
  $entity_field[0]['value'] = t($path);
}

function computed_field_field_title_r_cul_translit_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_items = field_get_items($entity_type, $entity, 'field_title_r_cul');
  $x = array_pop($field_items);
  $newspaper = array_pop($x);
  if (function_exists('transliteration_get')) {
    $newspaper = transliteration_get($newspaper, '-', language_default('language'));
    }
  $newspaper = strtolower(str_replace(' ', '-', $newspaper));
  $entity_field[0]['value'] = t($newspaper);
}

// function computed_field_field_title_r_cul_translit_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
//   dsm(array('entity_field_item value', $entity_field_item));
//   return $entity_field_item['value'];
// }

function computed_field_field_expected_issue_lookup_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $found_nid = 0;

  // find the date of the expected_issue
  $field_items = field_get_items($entity_type, $entity, 'field_pub_expected_issue_date');
  $no_lang = array_pop($field_items);
  $expected_date = $no_lang['value'];

  // find the publication of the expected_issue
  $field_items = field_get_items($entity_type, $entity, 'field_publication_ent_reference');
  $no_lang = array_pop($field_items);
  $expected_publication= array_pop($no_lang);

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication_issue')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_pub_issue_date', 'value', $expected_date, '=')
    ->fieldCondition('field_pub_issue_pub', 'target_id', $expected_publication, '=')
    ->fieldCondition('field_pub_issue_document', 'fid', 'NULL', '!=')
    ->range(0, 10)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if (isset($result['node'])) {
    $publication_nids = array_keys($result['node']);
    $found_nid = array_pop($publication_nids);
  }

  $entity_field[0]['value'] = $found_nid;
}

/**
 * automatic node titles module somehow dooes not create a proper value for the title if the user has
 * pressed the Upload button for the publication issue ([node:field-pub-issue-pub:title] is not resolved)
 * This puts yyyy-mm-dd <publication name> in the title field
 */
function computed_field_field_pub_issue_title_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {

  // find the issue date
  $field_items = field_get_items($entity_type, $entity, 'field_pub_issue_date');
  dpm($field_items, 'field_pub_issue_date');
  $no_lang = array_pop($field_items);
  $issue_date = $no_lang['value'];
  $parts = explode(' ', $issue_date);
  $issue_date = array_shift($parts); // original form is 'yyyy-mm-dd hh:mm:ss'
  dpm($issue_date, 'issue date');

  // find the publication title
  $field_items = field_get_items($entity_type, $entity, 'field_pub_issue_pub');
  dpm($field_items, 'field_pub_issue_pub');
  if (!empty($field_items) && is_array($field_items)) {
    $no_lang = array_pop($field_items);
    $pub_nid = array_pop($no_lang);
    $pub = node_load($pub_nid);
    dpm($pub);
    $publication = $pub->title;
  }
  else {
    $publication = 'unknown';
  }
  dpm($publication, 'publication');

  dpm($entity);

  $entity_field[0]['value'] = "$issue_date $publication";
}

/**
 * Implements hook_update_N()
 * Enables modules required by function seanews feature
 */
function seanews_misc_update_7000() {
  $modules = array(
    "acl", "content_access",
    "content_access_rules", "restrict_by_ip", "actions_permissions", "adminrole",
    "admin_devel", "admin_menu", "admin_menu_toolbar", "module_filter", "cck",
    "content_migrate", "bulk_export", "ctools", "ctools_ajax_sample",
    "ctools_plugin_example", "ctools_custom_content", "ctools_access_ruleset",
    "page_manager", "stylizer", "term_depth", "views_content", "context",
    "context_layouts", "context_ui", "aggregator", "block", "blog", "book", "color",
    "comment", "contact", "translation", "contextual", "dashboard", "dblog",
    "field", "field_sql_storage", "field_ui", "file", "filter", "forum", "help",
    "image", "list", "locale", "menu", "node", "number", "openid", "options",
    "overlay", "path", "php", "poll", "rdf", "search", "shortcut", "statistics",
    "syslog", "system", "taxonomy", "simpletest", "text", "toolbar", "tracker",
    "trigger", "update", "user", "seanews", "seapapers_feature",
    "simplesaml_authentication_for_cul", "date", "date_all_day", "date_api",
    "date_context", "date_popup", "date_repeat", "date_repeat_entity",
    "date_repeat_field", "date_tools", "date_views", "devel", "devel_generate",
    "devel_node_access", "replicate", "date_migrate_example", "features",
    "uuid_features", "uuid_services_example", "fe_block", "fe_date", "fe_nodequeue",
    "fe_profile", "feeds", "feeds_ui", "feeds_import", "feeds_news", "feeds_tamper",
    "feeds_tamper_ui", "computed_field", "content_taxonomy",
    "content_taxonomy_autocomplete", "content_taxonomy_migrate",
    "ddf_entityreference", "ddf", "email", "entityreference",
    "entityreference_behavior_example", "entityreference_prepopulate",
    "filefield_sources", "link", "node_reference", "references", "user_reference",
    "file_checker", "imageapi", "imageapi_gd", "imageapi_imagemagick", "emfield",
    "file_entity", "imce", "imce_filefield", "media", "media_internet",
    "rules_i18n", "advanced_help", "help_example", "auto_nodetitle", "autosave",
    "autoupload", "css_injector", "entity", "entity_token", "ip_login",
    "job_scheduler", "job_scheduler_trigger", "libraries", "menu_breadcrumb",
    "mimedetect", "mollom", "pathauto", "prepopulate", "redirect", "s3fs",
    "simplesamlphp_auth", "site_map", "strongarm", "token", "transliteration",
    "uiplog", "userprotect", "globalredirect", "rules", "rules_scheduler",
    "rules_admin", "search_api", "search_api_attachments",
    "search_api_attachments_entityreference",
    "search_api_attachments_field_collections", "search_api_facetapi",
    "search_api_views", "search_api_solr", "apachesolr_access", "apachesolr",
    "apachesolr_search", "apachesolr_attachments", "current_search", "facetapi",
    "page_title", "seo_checklist", "uuid_services", "captcha", "image_captcha",
    "recaptcha", "recaptcha_mailhide", "taxonomy_manager", "features_extra_test",
    "ckeditor", "imce_wysiwyg", "jquery_update", "wysiwyg", "uuid", "uuid_path",
    "eva", "views", "views_bulk_operations", "views_data_export", "views_php",
    "views_ui", "webform", "xmlsitemap", "xmlsitemap_custom", "xmlsitemap_engines",
    "xmlsitemap_i18n", "xmlsitemap_menu", "xmlsitemap_node", "xmlsitemap_taxonomy",
    "xmlsitemap_user", "bartik", "garland", "seven", "stark", "bluemasters",
    "skeletontheme", "zen",
    );
  module_enable($modules);
  //variable_set('search_restrict_content_type', $restrict);
}

/**
 * Implements hook_token_info();
 *
 * @return array info for the token module
 */
function seanews_token_info() {
  $types['seapapers'] = array(
    'name' => t("SEAPapers Tokens"),
    'description' => t("Tokens to use on the SEAPapers site"),
    );

  // our tokens
  $seapapers_tokens['short_dir'] = array(
    'name' => t("Short name"),
    'description' => t("Short (2 character) hash directory name"),
    );

  return array(
    'types' => $types,
    'tokens' => array(
      'seapapers' => $seapapers_tokens,
      ),
    );

}

/**
 * Implements hook_tokens()
 *
 */
function seanews_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'seapapers') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'short_dir':
          $chars = str_split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
          $rand = $chars[array_rand($chars)];
          $rand .= strval(mt_rand(0,9));
          $replacements[$original] = $rand;
          break;
       }
    }
  }

  return $replacements;
}

/**
 * Implements hook_preprocess_search_result
 */
function seanews_preprocess_search_result(&$variables) {
  if ($variables['module'] == 'apachesolr_search') {
    // remove the Gregory Green link and date from search results
    $variables['info'] = '';

    // replace the link to the node with a link to the document
    $type = $variables['result']['entity_type'];
    $nid = $variables['result']['node']->entity_id;
    $node = node_load($nid);
    if (!empty($node) && ($node->type == 'section')) {
      $wrapper = entity_metadata_wrapper($type, $node);
      $file = $wrapper->field_section_document->value();
      $variables['url'] = file_create_url($file['uri']);
    }
   }
}